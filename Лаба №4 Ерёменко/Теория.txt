Дополнительный функционал Transact SQL

1. Идентификаторы // переменные и типы
2. Циклы и ветвления
3. Переменные типа Table
4. Процедуры и функции


Идентификаторы --> имена объектов на которые можно ссылаться 

Переменные --> DECLARE @имя тип размер
DECLARE @name INT
DECLARE @str CHAR(20)
SET @name = 20 --> Присвоение значений

SELECT @name --> вывод результата

//////////

SELECT @str = surname FROM tpark (последнее значение из запроса)

Временная таблица через переменную TABLE

DECLARE @newtableTpark TABLE (id INT, name CHAR(20) DEFAULT 'Иван')
INSERT INTO @newtableTpark(id) VALUES (1)
INSERT INTO @newtableTpark (id, name) VALUES (2, 'Имя')

///

Функции и хранимые процедуры --> для автоматизации процессов (существуют независимо от таблиц)
Уменьшение нагрузки на сеть --> производительность
Системные и встроенные 
Пользовательские (user-defined) // Объект БД

Хранимые процедуры вызов EXEC 

3 класса функций
Scalaer --> возвращает скалярное значение
Inline --> возвращает таблицу динамической структуры 
Multi-statement --> обычная таблица


EXECUTE AS CALLER --> в контексте пользователя который ее вызывает (безопасность)
Проверка нету ли такой функции с таким же именем

Процедуры --> набор команд (1 или несколько операторов или функций)

OUTPUT --> возвращение данных из процедуры
DEFAULT --> принимает параметр по умолчанию
Выход return 


Создание CREATR PROCEDURE Count_Assistent // вычисление количества сотрудников
AS
Select count (name) from table
where (name) = 'имя'
go



Удаление DROP PROCEDURE {имя}

Выполнение 
EXECUTE имя [;номер]
[[@имя_параметра=]{ значение | @имя_переменной} 
[OUTPUT ]|[DEFAULT ]][,...n]

Указание параметров процедуры @parameter

EXECUTE нужно если вызов процедуры не 1 команда в пакете

Создаем процедуру



---------------------------------------------------------------------

1. DECLARE @a INT, @b numeric (10,2) --> объявление переменной
2. SET @a = 20
SET @b = (@a+@a)/10
3. SELECT @b 


SELECT @a = count(*) FROM Drivers




Функции --> берет переменную, обрабатывает, возвращает результат